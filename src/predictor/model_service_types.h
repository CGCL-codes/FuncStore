/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef model_service_TYPES_H
#define model_service_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace hive { namespace predictor {

class rpc_features_vec;

class rpc_label_vec;

typedef struct _rpc_features_vec__isset {
  _rpc_features_vec__isset() : vec(false) {}
  bool vec :1;
} _rpc_features_vec__isset;

class rpc_features_vec {
 public:

  rpc_features_vec(const rpc_features_vec&);
  rpc_features_vec& operator=(const rpc_features_vec&);
  rpc_features_vec() noexcept {
  }

  virtual ~rpc_features_vec() noexcept;
  std::vector<std::vector<int32_t> >  vec;

  _rpc_features_vec__isset __isset;

  void __set_vec(const std::vector<std::vector<int32_t> > & val);

  bool operator == (const rpc_features_vec & rhs) const
  {
    if (!(vec == rhs.vec))
      return false;
    return true;
  }
  bool operator != (const rpc_features_vec &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_features_vec & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(rpc_features_vec &a, rpc_features_vec &b);

std::ostream& operator<<(std::ostream& out, const rpc_features_vec& obj);

typedef struct _rpc_label_vec__isset {
  _rpc_label_vec__isset() : vec(false) {}
  bool vec :1;
} _rpc_label_vec__isset;

class rpc_label_vec {
 public:

  rpc_label_vec(const rpc_label_vec&);
  rpc_label_vec& operator=(const rpc_label_vec&);
  rpc_label_vec() noexcept {
  }

  virtual ~rpc_label_vec() noexcept;
  std::vector<int32_t>  vec;

  _rpc_label_vec__isset __isset;

  void __set_vec(const std::vector<int32_t> & val);

  bool operator == (const rpc_label_vec & rhs) const
  {
    if (!(vec == rhs.vec))
      return false;
    return true;
  }
  bool operator != (const rpc_label_vec &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_label_vec & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(rpc_label_vec &a, rpc_label_vec &b);

std::ostream& operator<<(std::ostream& out, const rpc_label_vec& obj);

}} // namespace

#include "model_service_types.tcc"

#endif
