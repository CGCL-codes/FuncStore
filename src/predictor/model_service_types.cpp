/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "model_service_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace hive { namespace predictor {


rpc_features_vec::~rpc_features_vec() noexcept {
}


void rpc_features_vec::__set_vec(const std::vector<std::vector<int32_t> > & val) {
  this->vec = val;
}
std::ostream& operator<<(std::ostream& out, const rpc_features_vec& obj)
{
  obj.printTo(out);
  return out;
}


void swap(rpc_features_vec &a, rpc_features_vec &b) {
  using ::std::swap;
  swap(a.vec, b.vec);
  swap(a.__isset, b.__isset);
}

rpc_features_vec::rpc_features_vec(const rpc_features_vec& other12) {
  vec = other12.vec;
  __isset = other12.__isset;
}
rpc_features_vec& rpc_features_vec::operator=(const rpc_features_vec& other13) {
  vec = other13.vec;
  __isset = other13.__isset;
  return *this;
}
void rpc_features_vec::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "rpc_features_vec(";
  out << "vec=" << to_string(vec);
  out << ")";
}


rpc_label_vec::~rpc_label_vec() noexcept {
}


void rpc_label_vec::__set_vec(const std::vector<int32_t> & val) {
  this->vec = val;
}
std::ostream& operator<<(std::ostream& out, const rpc_label_vec& obj)
{
  obj.printTo(out);
  return out;
}


void swap(rpc_label_vec &a, rpc_label_vec &b) {
  using ::std::swap;
  swap(a.vec, b.vec);
  swap(a.__isset, b.__isset);
}

rpc_label_vec::rpc_label_vec(const rpc_label_vec& other20) {
  vec = other20.vec;
  __isset = other20.__isset;
}
rpc_label_vec& rpc_label_vec::operator=(const rpc_label_vec& other21) {
  vec = other21.vec;
  __isset = other21.__isset;
  return *this;
}
void rpc_label_vec::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "rpc_label_vec(";
  out << "vec=" << to_string(vec);
  out << ")";
}

}} // namespace
