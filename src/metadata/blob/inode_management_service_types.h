/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef inode_management_service_TYPES_H
#define inode_management_service_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace hive { namespace metadata {

class rpc_inode;


class rpc_inode {
 public:

  rpc_inode(const rpc_inode&);
  rpc_inode& operator=(const rpc_inode&);
  rpc_inode() noexcept
            : name(""),
              lifetime(0) {
  }

  virtual ~rpc_inode() noexcept;
  std::string name;
  std::vector<std::string>  slices = {};
  int64_t lifetime;

  void __set_name(const std::string& val);

  void __set_slices(const std::vector<std::string> & val);

  void __set_lifetime(const int64_t val);

  bool operator == (const rpc_inode & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(slices == rhs.slices))
      return false;
    if (!(lifetime == rhs.lifetime))
      return false;
    return true;
  }
  bool operator != (const rpc_inode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_inode & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(rpc_inode &a, rpc_inode &b);

std::ostream& operator<<(std::ostream& out, const rpc_inode& obj);

}} // namespace

#include "inode_management_service_types.tcc"

#endif
