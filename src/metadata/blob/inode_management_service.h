/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef inode_management_service_H
#define inode_management_service_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "inode_management_service_types.h"

namespace hive { namespace metadata {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class inode_management_serviceIf {
 public:
  virtual ~inode_management_serviceIf() {}
  virtual void put_lf(rpc_inode& _return, const std::string& obj_name, const int64_t obj_size, const int64_t obj_lifetime) = 0;
  virtual void put(rpc_inode& _return, const std::string& obj_name, const int64_t obj_size) = 0;
  virtual void get(rpc_inode& _return, const std::string& obj_name) = 0;
  virtual void remove(const std::string& obj_name) = 0;
  virtual void hdag_put(rpc_inode& _return, const std::string& workflow_name, const std::string& function_name, const std::string& obj_name, const int64_t obj_size) = 0;
  virtual void hdag_get(rpc_inode& _return, const std::string& workflow_name, const std::string& function_name, const std::string& obj_name) = 0;
};

class inode_management_serviceIfFactory {
 public:
  typedef inode_management_serviceIf Handler;

  virtual ~inode_management_serviceIfFactory() {}

  virtual inode_management_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(inode_management_serviceIf* /* handler */) = 0;
  };

class inode_management_serviceIfSingletonFactory : virtual public inode_management_serviceIfFactory {
 public:
  inode_management_serviceIfSingletonFactory(const ::std::shared_ptr<inode_management_serviceIf>& iface) : iface_(iface) {}
  virtual ~inode_management_serviceIfSingletonFactory() {}

  virtual inode_management_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(inode_management_serviceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<inode_management_serviceIf> iface_;
};

class inode_management_serviceNull : virtual public inode_management_serviceIf {
 public:
  virtual ~inode_management_serviceNull() {}
  void put_lf(rpc_inode& /* _return */, const std::string& /* obj_name */, const int64_t /* obj_size */, const int64_t /* obj_lifetime */) override {
    return;
  }
  void put(rpc_inode& /* _return */, const std::string& /* obj_name */, const int64_t /* obj_size */) override {
    return;
  }
  void get(rpc_inode& /* _return */, const std::string& /* obj_name */) override {
    return;
  }
  void remove(const std::string& /* obj_name */) override {
    return;
  }
  void hdag_put(rpc_inode& /* _return */, const std::string& /* workflow_name */, const std::string& /* function_name */, const std::string& /* obj_name */, const int64_t /* obj_size */) override {
    return;
  }
  void hdag_get(rpc_inode& /* _return */, const std::string& /* workflow_name */, const std::string& /* function_name */, const std::string& /* obj_name */) override {
    return;
  }
};

typedef struct _inode_management_service_put_lf_args__isset {
  _inode_management_service_put_lf_args__isset() : obj_name(false), obj_size(false), obj_lifetime(false) {}
  bool obj_name :1;
  bool obj_size :1;
  bool obj_lifetime :1;
} _inode_management_service_put_lf_args__isset;

class inode_management_service_put_lf_args {
 public:

  inode_management_service_put_lf_args(const inode_management_service_put_lf_args&);
  inode_management_service_put_lf_args& operator=(const inode_management_service_put_lf_args&);
  inode_management_service_put_lf_args() noexcept
                                       : obj_name(),
                                         obj_size(0),
                                         obj_lifetime(0) {
  }

  virtual ~inode_management_service_put_lf_args() noexcept;
  std::string obj_name;
  int64_t obj_size;
  int64_t obj_lifetime;

  _inode_management_service_put_lf_args__isset __isset;

  void __set_obj_name(const std::string& val);

  void __set_obj_size(const int64_t val);

  void __set_obj_lifetime(const int64_t val);

  bool operator == (const inode_management_service_put_lf_args & rhs) const
  {
    if (!(obj_name == rhs.obj_name))
      return false;
    if (!(obj_size == rhs.obj_size))
      return false;
    if (!(obj_lifetime == rhs.obj_lifetime))
      return false;
    return true;
  }
  bool operator != (const inode_management_service_put_lf_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const inode_management_service_put_lf_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class inode_management_service_put_lf_pargs {
 public:


  virtual ~inode_management_service_put_lf_pargs() noexcept;
  const std::string* obj_name;
  const int64_t* obj_size;
  const int64_t* obj_lifetime;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _inode_management_service_put_lf_result__isset {
  _inode_management_service_put_lf_result__isset() : success(false) {}
  bool success :1;
} _inode_management_service_put_lf_result__isset;

class inode_management_service_put_lf_result {
 public:

  inode_management_service_put_lf_result(const inode_management_service_put_lf_result&);
  inode_management_service_put_lf_result& operator=(const inode_management_service_put_lf_result&);
  inode_management_service_put_lf_result() noexcept {
  }

  virtual ~inode_management_service_put_lf_result() noexcept;
  rpc_inode success;

  _inode_management_service_put_lf_result__isset __isset;

  void __set_success(const rpc_inode& val);

  bool operator == (const inode_management_service_put_lf_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const inode_management_service_put_lf_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const inode_management_service_put_lf_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _inode_management_service_put_lf_presult__isset {
  _inode_management_service_put_lf_presult__isset() : success(false) {}
  bool success :1;
} _inode_management_service_put_lf_presult__isset;

class inode_management_service_put_lf_presult {
 public:


  virtual ~inode_management_service_put_lf_presult() noexcept;
  rpc_inode* success;

  _inode_management_service_put_lf_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _inode_management_service_put_args__isset {
  _inode_management_service_put_args__isset() : obj_name(false), obj_size(false) {}
  bool obj_name :1;
  bool obj_size :1;
} _inode_management_service_put_args__isset;

class inode_management_service_put_args {
 public:

  inode_management_service_put_args(const inode_management_service_put_args&);
  inode_management_service_put_args& operator=(const inode_management_service_put_args&);
  inode_management_service_put_args() noexcept
                                    : obj_name(),
                                      obj_size(0) {
  }

  virtual ~inode_management_service_put_args() noexcept;
  std::string obj_name;
  int64_t obj_size;

  _inode_management_service_put_args__isset __isset;

  void __set_obj_name(const std::string& val);

  void __set_obj_size(const int64_t val);

  bool operator == (const inode_management_service_put_args & rhs) const
  {
    if (!(obj_name == rhs.obj_name))
      return false;
    if (!(obj_size == rhs.obj_size))
      return false;
    return true;
  }
  bool operator != (const inode_management_service_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const inode_management_service_put_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class inode_management_service_put_pargs {
 public:


  virtual ~inode_management_service_put_pargs() noexcept;
  const std::string* obj_name;
  const int64_t* obj_size;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _inode_management_service_put_result__isset {
  _inode_management_service_put_result__isset() : success(false) {}
  bool success :1;
} _inode_management_service_put_result__isset;

class inode_management_service_put_result {
 public:

  inode_management_service_put_result(const inode_management_service_put_result&);
  inode_management_service_put_result& operator=(const inode_management_service_put_result&);
  inode_management_service_put_result() noexcept {
  }

  virtual ~inode_management_service_put_result() noexcept;
  rpc_inode success;

  _inode_management_service_put_result__isset __isset;

  void __set_success(const rpc_inode& val);

  bool operator == (const inode_management_service_put_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const inode_management_service_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const inode_management_service_put_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _inode_management_service_put_presult__isset {
  _inode_management_service_put_presult__isset() : success(false) {}
  bool success :1;
} _inode_management_service_put_presult__isset;

class inode_management_service_put_presult {
 public:


  virtual ~inode_management_service_put_presult() noexcept;
  rpc_inode* success;

  _inode_management_service_put_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _inode_management_service_get_args__isset {
  _inode_management_service_get_args__isset() : obj_name(false) {}
  bool obj_name :1;
} _inode_management_service_get_args__isset;

class inode_management_service_get_args {
 public:

  inode_management_service_get_args(const inode_management_service_get_args&);
  inode_management_service_get_args& operator=(const inode_management_service_get_args&);
  inode_management_service_get_args() noexcept
                                    : obj_name() {
  }

  virtual ~inode_management_service_get_args() noexcept;
  std::string obj_name;

  _inode_management_service_get_args__isset __isset;

  void __set_obj_name(const std::string& val);

  bool operator == (const inode_management_service_get_args & rhs) const
  {
    if (!(obj_name == rhs.obj_name))
      return false;
    return true;
  }
  bool operator != (const inode_management_service_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const inode_management_service_get_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class inode_management_service_get_pargs {
 public:


  virtual ~inode_management_service_get_pargs() noexcept;
  const std::string* obj_name;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _inode_management_service_get_result__isset {
  _inode_management_service_get_result__isset() : success(false) {}
  bool success :1;
} _inode_management_service_get_result__isset;

class inode_management_service_get_result {
 public:

  inode_management_service_get_result(const inode_management_service_get_result&);
  inode_management_service_get_result& operator=(const inode_management_service_get_result&);
  inode_management_service_get_result() noexcept {
  }

  virtual ~inode_management_service_get_result() noexcept;
  rpc_inode success;

  _inode_management_service_get_result__isset __isset;

  void __set_success(const rpc_inode& val);

  bool operator == (const inode_management_service_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const inode_management_service_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const inode_management_service_get_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _inode_management_service_get_presult__isset {
  _inode_management_service_get_presult__isset() : success(false) {}
  bool success :1;
} _inode_management_service_get_presult__isset;

class inode_management_service_get_presult {
 public:


  virtual ~inode_management_service_get_presult() noexcept;
  rpc_inode* success;

  _inode_management_service_get_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _inode_management_service_remove_args__isset {
  _inode_management_service_remove_args__isset() : obj_name(false) {}
  bool obj_name :1;
} _inode_management_service_remove_args__isset;

class inode_management_service_remove_args {
 public:

  inode_management_service_remove_args(const inode_management_service_remove_args&);
  inode_management_service_remove_args& operator=(const inode_management_service_remove_args&);
  inode_management_service_remove_args() noexcept
                                       : obj_name() {
  }

  virtual ~inode_management_service_remove_args() noexcept;
  std::string obj_name;

  _inode_management_service_remove_args__isset __isset;

  void __set_obj_name(const std::string& val);

  bool operator == (const inode_management_service_remove_args & rhs) const
  {
    if (!(obj_name == rhs.obj_name))
      return false;
    return true;
  }
  bool operator != (const inode_management_service_remove_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const inode_management_service_remove_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class inode_management_service_remove_pargs {
 public:


  virtual ~inode_management_service_remove_pargs() noexcept;
  const std::string* obj_name;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class inode_management_service_remove_result {
 public:

  inode_management_service_remove_result(const inode_management_service_remove_result&) noexcept;
  inode_management_service_remove_result& operator=(const inode_management_service_remove_result&) noexcept;
  inode_management_service_remove_result() noexcept {
  }

  virtual ~inode_management_service_remove_result() noexcept;

  bool operator == (const inode_management_service_remove_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const inode_management_service_remove_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const inode_management_service_remove_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class inode_management_service_remove_presult {
 public:


  virtual ~inode_management_service_remove_presult() noexcept;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _inode_management_service_hdag_put_args__isset {
  _inode_management_service_hdag_put_args__isset() : workflow_name(false), function_name(false), obj_name(false), obj_size(false) {}
  bool workflow_name :1;
  bool function_name :1;
  bool obj_name :1;
  bool obj_size :1;
} _inode_management_service_hdag_put_args__isset;

class inode_management_service_hdag_put_args {
 public:

  inode_management_service_hdag_put_args(const inode_management_service_hdag_put_args&);
  inode_management_service_hdag_put_args& operator=(const inode_management_service_hdag_put_args&);
  inode_management_service_hdag_put_args() noexcept
                                         : workflow_name(),
                                           function_name(),
                                           obj_name(),
                                           obj_size(0) {
  }

  virtual ~inode_management_service_hdag_put_args() noexcept;
  std::string workflow_name;
  std::string function_name;
  std::string obj_name;
  int64_t obj_size;

  _inode_management_service_hdag_put_args__isset __isset;

  void __set_workflow_name(const std::string& val);

  void __set_function_name(const std::string& val);

  void __set_obj_name(const std::string& val);

  void __set_obj_size(const int64_t val);

  bool operator == (const inode_management_service_hdag_put_args & rhs) const
  {
    if (!(workflow_name == rhs.workflow_name))
      return false;
    if (!(function_name == rhs.function_name))
      return false;
    if (!(obj_name == rhs.obj_name))
      return false;
    if (!(obj_size == rhs.obj_size))
      return false;
    return true;
  }
  bool operator != (const inode_management_service_hdag_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const inode_management_service_hdag_put_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class inode_management_service_hdag_put_pargs {
 public:


  virtual ~inode_management_service_hdag_put_pargs() noexcept;
  const std::string* workflow_name;
  const std::string* function_name;
  const std::string* obj_name;
  const int64_t* obj_size;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _inode_management_service_hdag_put_result__isset {
  _inode_management_service_hdag_put_result__isset() : success(false) {}
  bool success :1;
} _inode_management_service_hdag_put_result__isset;

class inode_management_service_hdag_put_result {
 public:

  inode_management_service_hdag_put_result(const inode_management_service_hdag_put_result&);
  inode_management_service_hdag_put_result& operator=(const inode_management_service_hdag_put_result&);
  inode_management_service_hdag_put_result() noexcept {
  }

  virtual ~inode_management_service_hdag_put_result() noexcept;
  rpc_inode success;

  _inode_management_service_hdag_put_result__isset __isset;

  void __set_success(const rpc_inode& val);

  bool operator == (const inode_management_service_hdag_put_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const inode_management_service_hdag_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const inode_management_service_hdag_put_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _inode_management_service_hdag_put_presult__isset {
  _inode_management_service_hdag_put_presult__isset() : success(false) {}
  bool success :1;
} _inode_management_service_hdag_put_presult__isset;

class inode_management_service_hdag_put_presult {
 public:


  virtual ~inode_management_service_hdag_put_presult() noexcept;
  rpc_inode* success;

  _inode_management_service_hdag_put_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _inode_management_service_hdag_get_args__isset {
  _inode_management_service_hdag_get_args__isset() : workflow_name(false), function_name(false), obj_name(false) {}
  bool workflow_name :1;
  bool function_name :1;
  bool obj_name :1;
} _inode_management_service_hdag_get_args__isset;

class inode_management_service_hdag_get_args {
 public:

  inode_management_service_hdag_get_args(const inode_management_service_hdag_get_args&);
  inode_management_service_hdag_get_args& operator=(const inode_management_service_hdag_get_args&);
  inode_management_service_hdag_get_args() noexcept
                                         : workflow_name(),
                                           function_name(),
                                           obj_name() {
  }

  virtual ~inode_management_service_hdag_get_args() noexcept;
  std::string workflow_name;
  std::string function_name;
  std::string obj_name;

  _inode_management_service_hdag_get_args__isset __isset;

  void __set_workflow_name(const std::string& val);

  void __set_function_name(const std::string& val);

  void __set_obj_name(const std::string& val);

  bool operator == (const inode_management_service_hdag_get_args & rhs) const
  {
    if (!(workflow_name == rhs.workflow_name))
      return false;
    if (!(function_name == rhs.function_name))
      return false;
    if (!(obj_name == rhs.obj_name))
      return false;
    return true;
  }
  bool operator != (const inode_management_service_hdag_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const inode_management_service_hdag_get_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class inode_management_service_hdag_get_pargs {
 public:


  virtual ~inode_management_service_hdag_get_pargs() noexcept;
  const std::string* workflow_name;
  const std::string* function_name;
  const std::string* obj_name;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _inode_management_service_hdag_get_result__isset {
  _inode_management_service_hdag_get_result__isset() : success(false) {}
  bool success :1;
} _inode_management_service_hdag_get_result__isset;

class inode_management_service_hdag_get_result {
 public:

  inode_management_service_hdag_get_result(const inode_management_service_hdag_get_result&);
  inode_management_service_hdag_get_result& operator=(const inode_management_service_hdag_get_result&);
  inode_management_service_hdag_get_result() noexcept {
  }

  virtual ~inode_management_service_hdag_get_result() noexcept;
  rpc_inode success;

  _inode_management_service_hdag_get_result__isset __isset;

  void __set_success(const rpc_inode& val);

  bool operator == (const inode_management_service_hdag_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const inode_management_service_hdag_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const inode_management_service_hdag_get_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _inode_management_service_hdag_get_presult__isset {
  _inode_management_service_hdag_get_presult__isset() : success(false) {}
  bool success :1;
} _inode_management_service_hdag_get_presult__isset;

class inode_management_service_hdag_get_presult {
 public:


  virtual ~inode_management_service_hdag_get_presult() noexcept;
  rpc_inode* success;

  _inode_management_service_hdag_get_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

template <class Protocol_>
class inode_management_serviceClientT : virtual public inode_management_serviceIf {
 public:
  inode_management_serviceClientT(std::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  inode_management_serviceClientT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(std::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void put_lf(rpc_inode& _return, const std::string& obj_name, const int64_t obj_size, const int64_t obj_lifetime) override;
  void send_put_lf(const std::string& obj_name, const int64_t obj_size, const int64_t obj_lifetime);
  void recv_put_lf(rpc_inode& _return);
  void put(rpc_inode& _return, const std::string& obj_name, const int64_t obj_size) override;
  void send_put(const std::string& obj_name, const int64_t obj_size);
  void recv_put(rpc_inode& _return);
  void get(rpc_inode& _return, const std::string& obj_name) override;
  void send_get(const std::string& obj_name);
  void recv_get(rpc_inode& _return);
  void remove(const std::string& obj_name) override;
  void send_remove(const std::string& obj_name);
  void recv_remove();
  void hdag_put(rpc_inode& _return, const std::string& workflow_name, const std::string& function_name, const std::string& obj_name, const int64_t obj_size) override;
  void send_hdag_put(const std::string& workflow_name, const std::string& function_name, const std::string& obj_name, const int64_t obj_size);
  void recv_hdag_put(rpc_inode& _return);
  void hdag_get(rpc_inode& _return, const std::string& workflow_name, const std::string& function_name, const std::string& obj_name) override;
  void send_hdag_get(const std::string& workflow_name, const std::string& function_name, const std::string& obj_name);
  void recv_hdag_get(rpc_inode& _return);
 protected:
  std::shared_ptr< Protocol_> piprot_;
  std::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
};

typedef inode_management_serviceClientT< ::apache::thrift::protocol::TProtocol> inode_management_serviceClient;

template <class Protocol_>
class inode_management_serviceProcessorT : public ::apache::thrift::TDispatchProcessorT<Protocol_> {
 protected:
  ::std::shared_ptr<inode_management_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
  virtual bool dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (inode_management_serviceProcessorT::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef void (inode_management_serviceProcessorT::*SpecializedProcessFunction)(int32_t, Protocol_*, Protocol_*, void*);
  struct ProcessFunctions {
    ProcessFunction generic;
    SpecializedProcessFunction specialized;
    ProcessFunctions(ProcessFunction g, SpecializedProcessFunction s) :
      generic(g),
      specialized(s) {}
    ProcessFunctions() : generic(nullptr), specialized(nullptr) {}
  };
  typedef std::map<std::string, ProcessFunctions> ProcessMap;
  ProcessMap processMap_;
  void process_put_lf(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_put_lf(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_put(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_remove(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_remove(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_hdag_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_hdag_put(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_hdag_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_hdag_get(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
 public:
  inode_management_serviceProcessorT(::std::shared_ptr<inode_management_serviceIf> iface) :
    iface_(iface) {
    processMap_["put_lf"] = ProcessFunctions(
      &inode_management_serviceProcessorT::process_put_lf,
      &inode_management_serviceProcessorT::process_put_lf);
    processMap_["put"] = ProcessFunctions(
      &inode_management_serviceProcessorT::process_put,
      &inode_management_serviceProcessorT::process_put);
    processMap_["get"] = ProcessFunctions(
      &inode_management_serviceProcessorT::process_get,
      &inode_management_serviceProcessorT::process_get);
    processMap_["remove"] = ProcessFunctions(
      &inode_management_serviceProcessorT::process_remove,
      &inode_management_serviceProcessorT::process_remove);
    processMap_["hdag_put"] = ProcessFunctions(
      &inode_management_serviceProcessorT::process_hdag_put,
      &inode_management_serviceProcessorT::process_hdag_put);
    processMap_["hdag_get"] = ProcessFunctions(
      &inode_management_serviceProcessorT::process_hdag_get,
      &inode_management_serviceProcessorT::process_hdag_get);
  }

  virtual ~inode_management_serviceProcessorT() {}
};

typedef inode_management_serviceProcessorT< ::apache::thrift::protocol::TDummyProtocol > inode_management_serviceProcessor;

template <class Protocol_>
class inode_management_serviceProcessorFactoryT : public ::apache::thrift::TProcessorFactory {
 public:
  inode_management_serviceProcessorFactoryT(const ::std::shared_ptr< inode_management_serviceIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< inode_management_serviceIfFactory > handlerFactory_;
};

typedef inode_management_serviceProcessorFactoryT< ::apache::thrift::protocol::TDummyProtocol > inode_management_serviceProcessorFactory;

class inode_management_serviceMultiface : virtual public inode_management_serviceIf {
 public:
  inode_management_serviceMultiface(std::vector<std::shared_ptr<inode_management_serviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~inode_management_serviceMultiface() {}
 protected:
  std::vector<std::shared_ptr<inode_management_serviceIf> > ifaces_;
  inode_management_serviceMultiface() {}
  void add(::std::shared_ptr<inode_management_serviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void put_lf(rpc_inode& _return, const std::string& obj_name, const int64_t obj_size, const int64_t obj_lifetime) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->put_lf(_return, obj_name, obj_size, obj_lifetime);
    }
    ifaces_[i]->put_lf(_return, obj_name, obj_size, obj_lifetime);
    return;
  }

  void put(rpc_inode& _return, const std::string& obj_name, const int64_t obj_size) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->put(_return, obj_name, obj_size);
    }
    ifaces_[i]->put(_return, obj_name, obj_size);
    return;
  }

  void get(rpc_inode& _return, const std::string& obj_name) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, obj_name);
    }
    ifaces_[i]->get(_return, obj_name);
    return;
  }

  void remove(const std::string& obj_name) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->remove(obj_name);
    }
    ifaces_[i]->remove(obj_name);
  }

  void hdag_put(rpc_inode& _return, const std::string& workflow_name, const std::string& function_name, const std::string& obj_name, const int64_t obj_size) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->hdag_put(_return, workflow_name, function_name, obj_name, obj_size);
    }
    ifaces_[i]->hdag_put(_return, workflow_name, function_name, obj_name, obj_size);
    return;
  }

  void hdag_get(rpc_inode& _return, const std::string& workflow_name, const std::string& function_name, const std::string& obj_name) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->hdag_get(_return, workflow_name, function_name, obj_name);
    }
    ifaces_[i]->hdag_get(_return, workflow_name, function_name, obj_name);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
template <class Protocol_>
class inode_management_serviceConcurrentClientT : virtual public inode_management_serviceIf {
 public:
  inode_management_serviceConcurrentClientT(std::shared_ptr< Protocol_> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocolT(prot);
  }
  inode_management_serviceConcurrentClientT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(std::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void put_lf(rpc_inode& _return, const std::string& obj_name, const int64_t obj_size, const int64_t obj_lifetime) override;
  int32_t send_put_lf(const std::string& obj_name, const int64_t obj_size, const int64_t obj_lifetime);
  void recv_put_lf(rpc_inode& _return, const int32_t seqid);
  void put(rpc_inode& _return, const std::string& obj_name, const int64_t obj_size) override;
  int32_t send_put(const std::string& obj_name, const int64_t obj_size);
  void recv_put(rpc_inode& _return, const int32_t seqid);
  void get(rpc_inode& _return, const std::string& obj_name) override;
  int32_t send_get(const std::string& obj_name);
  void recv_get(rpc_inode& _return, const int32_t seqid);
  void remove(const std::string& obj_name) override;
  int32_t send_remove(const std::string& obj_name);
  void recv_remove(const int32_t seqid);
  void hdag_put(rpc_inode& _return, const std::string& workflow_name, const std::string& function_name, const std::string& obj_name, const int64_t obj_size) override;
  int32_t send_hdag_put(const std::string& workflow_name, const std::string& function_name, const std::string& obj_name, const int64_t obj_size);
  void recv_hdag_put(rpc_inode& _return, const int32_t seqid);
  void hdag_get(rpc_inode& _return, const std::string& workflow_name, const std::string& function_name, const std::string& obj_name) override;
  int32_t send_hdag_get(const std::string& workflow_name, const std::string& function_name, const std::string& obj_name);
  void recv_hdag_get(rpc_inode& _return, const int32_t seqid);
 protected:
  std::shared_ptr< Protocol_> piprot_;
  std::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

typedef inode_management_serviceConcurrentClientT< ::apache::thrift::protocol::TProtocol> inode_management_serviceConcurrentClient;

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#include "inode_management_service.tcc"
#include "inode_management_service_types.tcc"

#endif
