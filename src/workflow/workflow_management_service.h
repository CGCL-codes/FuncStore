/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef workflow_management_service_H
#define workflow_management_service_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "workflow_management_service_types.h"

namespace hive { namespace workflow {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class workflow_management_serviceIf {
 public:
  virtual ~workflow_management_serviceIf() {}
  virtual void workflow_register(const std::string& workflow) = 0;
  virtual void workflow_deregister(const std::string& workflow_name) = 0;
};

class workflow_management_serviceIfFactory {
 public:
  typedef workflow_management_serviceIf Handler;

  virtual ~workflow_management_serviceIfFactory() {}

  virtual workflow_management_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(workflow_management_serviceIf* /* handler */) = 0;
  };

class workflow_management_serviceIfSingletonFactory : virtual public workflow_management_serviceIfFactory {
 public:
  workflow_management_serviceIfSingletonFactory(const ::std::shared_ptr<workflow_management_serviceIf>& iface) : iface_(iface) {}
  virtual ~workflow_management_serviceIfSingletonFactory() {}

  virtual workflow_management_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(workflow_management_serviceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<workflow_management_serviceIf> iface_;
};

class workflow_management_serviceNull : virtual public workflow_management_serviceIf {
 public:
  virtual ~workflow_management_serviceNull() {}
  void workflow_register(const std::string& /* workflow */) override {
    return;
  }
  void workflow_deregister(const std::string& /* workflow_name */) override {
    return;
  }
};

typedef struct _workflow_management_service_workflow_register_args__isset {
  _workflow_management_service_workflow_register_args__isset() : workflow(false) {}
  bool workflow :1;
} _workflow_management_service_workflow_register_args__isset;

class workflow_management_service_workflow_register_args {
 public:

  workflow_management_service_workflow_register_args(const workflow_management_service_workflow_register_args&);
  workflow_management_service_workflow_register_args& operator=(const workflow_management_service_workflow_register_args&);
  workflow_management_service_workflow_register_args() noexcept
                                                     : workflow() {
  }

  virtual ~workflow_management_service_workflow_register_args() noexcept;
  std::string workflow;

  _workflow_management_service_workflow_register_args__isset __isset;

  void __set_workflow(const std::string& val);

  bool operator == (const workflow_management_service_workflow_register_args & rhs) const
  {
    if (!(workflow == rhs.workflow))
      return false;
    return true;
  }
  bool operator != (const workflow_management_service_workflow_register_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const workflow_management_service_workflow_register_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class workflow_management_service_workflow_register_pargs {
 public:


  virtual ~workflow_management_service_workflow_register_pargs() noexcept;
  const std::string* workflow;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class workflow_management_service_workflow_register_result {
 public:

  workflow_management_service_workflow_register_result(const workflow_management_service_workflow_register_result&) noexcept;
  workflow_management_service_workflow_register_result& operator=(const workflow_management_service_workflow_register_result&) noexcept;
  workflow_management_service_workflow_register_result() noexcept {
  }

  virtual ~workflow_management_service_workflow_register_result() noexcept;

  bool operator == (const workflow_management_service_workflow_register_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const workflow_management_service_workflow_register_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const workflow_management_service_workflow_register_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class workflow_management_service_workflow_register_presult {
 public:


  virtual ~workflow_management_service_workflow_register_presult() noexcept;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _workflow_management_service_workflow_deregister_args__isset {
  _workflow_management_service_workflow_deregister_args__isset() : workflow_name(false) {}
  bool workflow_name :1;
} _workflow_management_service_workflow_deregister_args__isset;

class workflow_management_service_workflow_deregister_args {
 public:

  workflow_management_service_workflow_deregister_args(const workflow_management_service_workflow_deregister_args&);
  workflow_management_service_workflow_deregister_args& operator=(const workflow_management_service_workflow_deregister_args&);
  workflow_management_service_workflow_deregister_args() noexcept
                                                       : workflow_name() {
  }

  virtual ~workflow_management_service_workflow_deregister_args() noexcept;
  std::string workflow_name;

  _workflow_management_service_workflow_deregister_args__isset __isset;

  void __set_workflow_name(const std::string& val);

  bool operator == (const workflow_management_service_workflow_deregister_args & rhs) const
  {
    if (!(workflow_name == rhs.workflow_name))
      return false;
    return true;
  }
  bool operator != (const workflow_management_service_workflow_deregister_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const workflow_management_service_workflow_deregister_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class workflow_management_service_workflow_deregister_pargs {
 public:


  virtual ~workflow_management_service_workflow_deregister_pargs() noexcept;
  const std::string* workflow_name;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class workflow_management_service_workflow_deregister_result {
 public:

  workflow_management_service_workflow_deregister_result(const workflow_management_service_workflow_deregister_result&) noexcept;
  workflow_management_service_workflow_deregister_result& operator=(const workflow_management_service_workflow_deregister_result&) noexcept;
  workflow_management_service_workflow_deregister_result() noexcept {
  }

  virtual ~workflow_management_service_workflow_deregister_result() noexcept;

  bool operator == (const workflow_management_service_workflow_deregister_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const workflow_management_service_workflow_deregister_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const workflow_management_service_workflow_deregister_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class workflow_management_service_workflow_deregister_presult {
 public:


  virtual ~workflow_management_service_workflow_deregister_presult() noexcept;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

template <class Protocol_>
class workflow_management_serviceClientT : virtual public workflow_management_serviceIf {
 public:
  workflow_management_serviceClientT(std::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  workflow_management_serviceClientT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(std::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void workflow_register(const std::string& workflow) override;
  void send_workflow_register(const std::string& workflow);
  void recv_workflow_register();
  void workflow_deregister(const std::string& workflow_name) override;
  void send_workflow_deregister(const std::string& workflow_name);
  void recv_workflow_deregister();
 protected:
  std::shared_ptr< Protocol_> piprot_;
  std::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
};

typedef workflow_management_serviceClientT< ::apache::thrift::protocol::TProtocol> workflow_management_serviceClient;

template <class Protocol_>
class workflow_management_serviceProcessorT : public ::apache::thrift::TDispatchProcessorT<Protocol_> {
 protected:
  ::std::shared_ptr<workflow_management_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
  virtual bool dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (workflow_management_serviceProcessorT::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef void (workflow_management_serviceProcessorT::*SpecializedProcessFunction)(int32_t, Protocol_*, Protocol_*, void*);
  struct ProcessFunctions {
    ProcessFunction generic;
    SpecializedProcessFunction specialized;
    ProcessFunctions(ProcessFunction g, SpecializedProcessFunction s) :
      generic(g),
      specialized(s) {}
    ProcessFunctions() : generic(nullptr), specialized(nullptr) {}
  };
  typedef std::map<std::string, ProcessFunctions> ProcessMap;
  ProcessMap processMap_;
  void process_workflow_register(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_workflow_register(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_workflow_deregister(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_workflow_deregister(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
 public:
  workflow_management_serviceProcessorT(::std::shared_ptr<workflow_management_serviceIf> iface) :
    iface_(iface) {
    processMap_["workflow_register"] = ProcessFunctions(
      &workflow_management_serviceProcessorT::process_workflow_register,
      &workflow_management_serviceProcessorT::process_workflow_register);
    processMap_["workflow_deregister"] = ProcessFunctions(
      &workflow_management_serviceProcessorT::process_workflow_deregister,
      &workflow_management_serviceProcessorT::process_workflow_deregister);
  }

  virtual ~workflow_management_serviceProcessorT() {}
};

typedef workflow_management_serviceProcessorT< ::apache::thrift::protocol::TDummyProtocol > workflow_management_serviceProcessor;

template <class Protocol_>
class workflow_management_serviceProcessorFactoryT : public ::apache::thrift::TProcessorFactory {
 public:
  workflow_management_serviceProcessorFactoryT(const ::std::shared_ptr< workflow_management_serviceIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< workflow_management_serviceIfFactory > handlerFactory_;
};

typedef workflow_management_serviceProcessorFactoryT< ::apache::thrift::protocol::TDummyProtocol > workflow_management_serviceProcessorFactory;

class workflow_management_serviceMultiface : virtual public workflow_management_serviceIf {
 public:
  workflow_management_serviceMultiface(std::vector<std::shared_ptr<workflow_management_serviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~workflow_management_serviceMultiface() {}
 protected:
  std::vector<std::shared_ptr<workflow_management_serviceIf> > ifaces_;
  workflow_management_serviceMultiface() {}
  void add(::std::shared_ptr<workflow_management_serviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void workflow_register(const std::string& workflow) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->workflow_register(workflow);
    }
    ifaces_[i]->workflow_register(workflow);
  }

  void workflow_deregister(const std::string& workflow_name) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->workflow_deregister(workflow_name);
    }
    ifaces_[i]->workflow_deregister(workflow_name);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
template <class Protocol_>
class workflow_management_serviceConcurrentClientT : virtual public workflow_management_serviceIf {
 public:
  workflow_management_serviceConcurrentClientT(std::shared_ptr< Protocol_> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocolT(prot);
  }
  workflow_management_serviceConcurrentClientT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(std::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void workflow_register(const std::string& workflow) override;
  int32_t send_workflow_register(const std::string& workflow);
  void recv_workflow_register(const int32_t seqid);
  void workflow_deregister(const std::string& workflow_name) override;
  int32_t send_workflow_deregister(const std::string& workflow_name);
  void recv_workflow_deregister(const int32_t seqid);
 protected:
  std::shared_ptr< Protocol_> piprot_;
  std::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

typedef workflow_management_serviceConcurrentClientT< ::apache::thrift::protocol::TProtocol> workflow_management_serviceConcurrentClient;

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#include "workflow_management_service.tcc"
#include "workflow_management_service_types.tcc"

#endif
