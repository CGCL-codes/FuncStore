/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_management_service_H
#define storage_management_service_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "storage_management_service_types.h"

namespace hive { namespace storage {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class storage_management_serviceIf {
 public:
  virtual ~storage_management_serviceIf() {}
  virtual void put(const std::string& object, const int32_t block_id, const int32_t offset, const int32_t size) = 0;
  virtual void get(std::string& _return, const int32_t block_id, const int32_t offset, const int32_t size) = 0;
  virtual void async_put(async_response& _return, const slice_seq& seq, const std::string& object, const int32_t block_id, const int32_t offset, const int32_t size) = 0;
  virtual void async_get(async_response& _return, const slice_seq& seq, const int32_t block_id, const int32_t offset, const int32_t size) = 0;
};

class storage_management_serviceIfFactory {
 public:
  typedef storage_management_serviceIf Handler;

  virtual ~storage_management_serviceIfFactory() {}

  virtual storage_management_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(storage_management_serviceIf* /* handler */) = 0;
  };

class storage_management_serviceIfSingletonFactory : virtual public storage_management_serviceIfFactory {
 public:
  storage_management_serviceIfSingletonFactory(const ::std::shared_ptr<storage_management_serviceIf>& iface) : iface_(iface) {}
  virtual ~storage_management_serviceIfSingletonFactory() {}

  virtual storage_management_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) override {
    return iface_.get();
  }
  virtual void releaseHandler(storage_management_serviceIf* /* handler */) override {}

 protected:
  ::std::shared_ptr<storage_management_serviceIf> iface_;
};

class storage_management_serviceNull : virtual public storage_management_serviceIf {
 public:
  virtual ~storage_management_serviceNull() {}
  void put(const std::string& /* object */, const int32_t /* block_id */, const int32_t /* offset */, const int32_t /* size */) override {
    return;
  }
  void get(std::string& /* _return */, const int32_t /* block_id */, const int32_t /* offset */, const int32_t /* size */) override {
    return;
  }
  void async_put(async_response& /* _return */, const slice_seq& /* seq */, const std::string& /* object */, const int32_t /* block_id */, const int32_t /* offset */, const int32_t /* size */) override {
    return;
  }
  void async_get(async_response& /* _return */, const slice_seq& /* seq */, const int32_t /* block_id */, const int32_t /* offset */, const int32_t /* size */) override {
    return;
  }
};

typedef struct _storage_management_service_put_args__isset {
  _storage_management_service_put_args__isset() : object(false), block_id(false), offset(false), size(false) {}
  bool object :1;
  bool block_id :1;
  bool offset :1;
  bool size :1;
} _storage_management_service_put_args__isset;

class storage_management_service_put_args {
 public:

  storage_management_service_put_args(const storage_management_service_put_args&);
  storage_management_service_put_args& operator=(const storage_management_service_put_args&);
  storage_management_service_put_args() noexcept
                                      : object(),
                                        block_id(0),
                                        offset(0),
                                        size(0) {
  }

  virtual ~storage_management_service_put_args() noexcept;
  std::string object;
  int32_t block_id;
  int32_t offset;
  int32_t size;

  _storage_management_service_put_args__isset __isset;

  void __set_object(const std::string& val);

  void __set_block_id(const int32_t val);

  void __set_offset(const int32_t val);

  void __set_size(const int32_t val);

  bool operator == (const storage_management_service_put_args & rhs) const
  {
    if (!(object == rhs.object))
      return false;
    if (!(block_id == rhs.block_id))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_put_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class storage_management_service_put_pargs {
 public:


  virtual ~storage_management_service_put_pargs() noexcept;
  const std::string* object;
  const int32_t* block_id;
  const int32_t* offset;
  const int32_t* size;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class storage_management_service_put_result {
 public:

  storage_management_service_put_result(const storage_management_service_put_result&) noexcept;
  storage_management_service_put_result& operator=(const storage_management_service_put_result&) noexcept;
  storage_management_service_put_result() noexcept {
  }

  virtual ~storage_management_service_put_result() noexcept;

  bool operator == (const storage_management_service_put_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const storage_management_service_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_put_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class storage_management_service_put_presult {
 public:


  virtual ~storage_management_service_put_presult() noexcept;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _storage_management_service_get_args__isset {
  _storage_management_service_get_args__isset() : block_id(false), offset(false), size(false) {}
  bool block_id :1;
  bool offset :1;
  bool size :1;
} _storage_management_service_get_args__isset;

class storage_management_service_get_args {
 public:

  storage_management_service_get_args(const storage_management_service_get_args&) noexcept;
  storage_management_service_get_args& operator=(const storage_management_service_get_args&) noexcept;
  storage_management_service_get_args() noexcept
                                      : block_id(0),
                                        offset(0),
                                        size(0) {
  }

  virtual ~storage_management_service_get_args() noexcept;
  int32_t block_id;
  int32_t offset;
  int32_t size;

  _storage_management_service_get_args__isset __isset;

  void __set_block_id(const int32_t val);

  void __set_offset(const int32_t val);

  void __set_size(const int32_t val);

  bool operator == (const storage_management_service_get_args & rhs) const
  {
    if (!(block_id == rhs.block_id))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_get_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class storage_management_service_get_pargs {
 public:


  virtual ~storage_management_service_get_pargs() noexcept;
  const int32_t* block_id;
  const int32_t* offset;
  const int32_t* size;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_get_result__isset {
  _storage_management_service_get_result__isset() : success(false) {}
  bool success :1;
} _storage_management_service_get_result__isset;

class storage_management_service_get_result {
 public:

  storage_management_service_get_result(const storage_management_service_get_result&);
  storage_management_service_get_result& operator=(const storage_management_service_get_result&);
  storage_management_service_get_result() noexcept
                                        : success() {
  }

  virtual ~storage_management_service_get_result() noexcept;
  std::string success;

  _storage_management_service_get_result__isset __isset;

  void __set_success(const std::string& val);

  bool operator == (const storage_management_service_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_get_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_get_presult__isset {
  _storage_management_service_get_presult__isset() : success(false) {}
  bool success :1;
} _storage_management_service_get_presult__isset;

class storage_management_service_get_presult {
 public:


  virtual ~storage_management_service_get_presult() noexcept;
  std::string* success;

  _storage_management_service_get_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _storage_management_service_async_put_args__isset {
  _storage_management_service_async_put_args__isset() : seq(false), object(false), block_id(false), offset(false), size(false) {}
  bool seq :1;
  bool object :1;
  bool block_id :1;
  bool offset :1;
  bool size :1;
} _storage_management_service_async_put_args__isset;

class storage_management_service_async_put_args {
 public:

  storage_management_service_async_put_args(const storage_management_service_async_put_args&);
  storage_management_service_async_put_args& operator=(const storage_management_service_async_put_args&);
  storage_management_service_async_put_args() noexcept
                                            : object(),
                                              block_id(0),
                                              offset(0),
                                              size(0) {
  }

  virtual ~storage_management_service_async_put_args() noexcept;
  slice_seq seq;
  std::string object;
  int32_t block_id;
  int32_t offset;
  int32_t size;

  _storage_management_service_async_put_args__isset __isset;

  void __set_seq(const slice_seq& val);

  void __set_object(const std::string& val);

  void __set_block_id(const int32_t val);

  void __set_offset(const int32_t val);

  void __set_size(const int32_t val);

  bool operator == (const storage_management_service_async_put_args & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (!(object == rhs.object))
      return false;
    if (!(block_id == rhs.block_id))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_async_put_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_async_put_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class storage_management_service_async_put_pargs {
 public:


  virtual ~storage_management_service_async_put_pargs() noexcept;
  const slice_seq* seq;
  const std::string* object;
  const int32_t* block_id;
  const int32_t* offset;
  const int32_t* size;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_async_put_result__isset {
  _storage_management_service_async_put_result__isset() : success(false) {}
  bool success :1;
} _storage_management_service_async_put_result__isset;

class storage_management_service_async_put_result {
 public:

  storage_management_service_async_put_result(const storage_management_service_async_put_result&);
  storage_management_service_async_put_result& operator=(const storage_management_service_async_put_result&);
  storage_management_service_async_put_result() noexcept {
  }

  virtual ~storage_management_service_async_put_result() noexcept;
  async_response success;

  _storage_management_service_async_put_result__isset __isset;

  void __set_success(const async_response& val);

  bool operator == (const storage_management_service_async_put_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_async_put_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_async_put_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_async_put_presult__isset {
  _storage_management_service_async_put_presult__isset() : success(false) {}
  bool success :1;
} _storage_management_service_async_put_presult__isset;

class storage_management_service_async_put_presult {
 public:


  virtual ~storage_management_service_async_put_presult() noexcept;
  async_response* success;

  _storage_management_service_async_put_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _storage_management_service_async_get_args__isset {
  _storage_management_service_async_get_args__isset() : seq(false), block_id(false), offset(false), size(false) {}
  bool seq :1;
  bool block_id :1;
  bool offset :1;
  bool size :1;
} _storage_management_service_async_get_args__isset;

class storage_management_service_async_get_args {
 public:

  storage_management_service_async_get_args(const storage_management_service_async_get_args&);
  storage_management_service_async_get_args& operator=(const storage_management_service_async_get_args&);
  storage_management_service_async_get_args() noexcept
                                            : block_id(0),
                                              offset(0),
                                              size(0) {
  }

  virtual ~storage_management_service_async_get_args() noexcept;
  slice_seq seq;
  int32_t block_id;
  int32_t offset;
  int32_t size;

  _storage_management_service_async_get_args__isset __isset;

  void __set_seq(const slice_seq& val);

  void __set_block_id(const int32_t val);

  void __set_offset(const int32_t val);

  void __set_size(const int32_t val);

  bool operator == (const storage_management_service_async_get_args & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (!(block_id == rhs.block_id))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(size == rhs.size))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_async_get_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_async_get_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class storage_management_service_async_get_pargs {
 public:


  virtual ~storage_management_service_async_get_pargs() noexcept;
  const slice_seq* seq;
  const int32_t* block_id;
  const int32_t* offset;
  const int32_t* size;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_async_get_result__isset {
  _storage_management_service_async_get_result__isset() : success(false) {}
  bool success :1;
} _storage_management_service_async_get_result__isset;

class storage_management_service_async_get_result {
 public:

  storage_management_service_async_get_result(const storage_management_service_async_get_result&);
  storage_management_service_async_get_result& operator=(const storage_management_service_async_get_result&);
  storage_management_service_async_get_result() noexcept {
  }

  virtual ~storage_management_service_async_get_result() noexcept;
  async_response success;

  _storage_management_service_async_get_result__isset __isset;

  void __set_success(const async_response& val);

  bool operator == (const storage_management_service_async_get_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_async_get_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_async_get_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_async_get_presult__isset {
  _storage_management_service_async_get_presult__isset() : success(false) {}
  bool success :1;
} _storage_management_service_async_get_presult__isset;

class storage_management_service_async_get_presult {
 public:


  virtual ~storage_management_service_async_get_presult() noexcept;
  async_response* success;

  _storage_management_service_async_get_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

template <class Protocol_>
class storage_management_serviceClientT : virtual public storage_management_serviceIf {
 public:
  storage_management_serviceClientT(std::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  storage_management_serviceClientT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(std::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void put(const std::string& object, const int32_t block_id, const int32_t offset, const int32_t size) override;
  void send_put(const std::string& object, const int32_t block_id, const int32_t offset, const int32_t size);
  void recv_put();
  void get(std::string& _return, const int32_t block_id, const int32_t offset, const int32_t size) override;
  void send_get(const int32_t block_id, const int32_t offset, const int32_t size);
  void recv_get(std::string& _return);
  void async_put(async_response& _return, const slice_seq& seq, const std::string& object, const int32_t block_id, const int32_t offset, const int32_t size) override;
  void send_async_put(const slice_seq& seq, const std::string& object, const int32_t block_id, const int32_t offset, const int32_t size);
  void recv_async_put(async_response& _return);
  void async_get(async_response& _return, const slice_seq& seq, const int32_t block_id, const int32_t offset, const int32_t size) override;
  void send_async_get(const slice_seq& seq, const int32_t block_id, const int32_t offset, const int32_t size);
  void recv_async_get(async_response& _return);
 protected:
  std::shared_ptr< Protocol_> piprot_;
  std::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
};

typedef storage_management_serviceClientT< ::apache::thrift::protocol::TProtocol> storage_management_serviceClient;

template <class Protocol_>
class storage_management_serviceProcessorT : public ::apache::thrift::TDispatchProcessorT<Protocol_> {
 protected:
  ::std::shared_ptr<storage_management_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) override;
  virtual bool dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (storage_management_serviceProcessorT::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef void (storage_management_serviceProcessorT::*SpecializedProcessFunction)(int32_t, Protocol_*, Protocol_*, void*);
  struct ProcessFunctions {
    ProcessFunction generic;
    SpecializedProcessFunction specialized;
    ProcessFunctions(ProcessFunction g, SpecializedProcessFunction s) :
      generic(g),
      specialized(s) {}
    ProcessFunctions() : generic(nullptr), specialized(nullptr) {}
  };
  typedef std::map<std::string, ProcessFunctions> ProcessMap;
  ProcessMap processMap_;
  void process_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_put(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_async_put(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_async_put(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_async_get(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_async_get(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
 public:
  storage_management_serviceProcessorT(::std::shared_ptr<storage_management_serviceIf> iface) :
    iface_(iface) {
    processMap_["put"] = ProcessFunctions(
      &storage_management_serviceProcessorT::process_put,
      &storage_management_serviceProcessorT::process_put);
    processMap_["get"] = ProcessFunctions(
      &storage_management_serviceProcessorT::process_get,
      &storage_management_serviceProcessorT::process_get);
    processMap_["async_put"] = ProcessFunctions(
      &storage_management_serviceProcessorT::process_async_put,
      &storage_management_serviceProcessorT::process_async_put);
    processMap_["async_get"] = ProcessFunctions(
      &storage_management_serviceProcessorT::process_async_get,
      &storage_management_serviceProcessorT::process_async_get);
  }

  virtual ~storage_management_serviceProcessorT() {}
};

typedef storage_management_serviceProcessorT< ::apache::thrift::protocol::TDummyProtocol > storage_management_serviceProcessor;

template <class Protocol_>
class storage_management_serviceProcessorFactoryT : public ::apache::thrift::TProcessorFactory {
 public:
  storage_management_serviceProcessorFactoryT(const ::std::shared_ptr< storage_management_serviceIfFactory >& handlerFactory) noexcept :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) override;

 protected:
  ::std::shared_ptr< storage_management_serviceIfFactory > handlerFactory_;
};

typedef storage_management_serviceProcessorFactoryT< ::apache::thrift::protocol::TDummyProtocol > storage_management_serviceProcessorFactory;

class storage_management_serviceMultiface : virtual public storage_management_serviceIf {
 public:
  storage_management_serviceMultiface(std::vector<std::shared_ptr<storage_management_serviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~storage_management_serviceMultiface() {}
 protected:
  std::vector<std::shared_ptr<storage_management_serviceIf> > ifaces_;
  storage_management_serviceMultiface() {}
  void add(::std::shared_ptr<storage_management_serviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void put(const std::string& object, const int32_t block_id, const int32_t offset, const int32_t size) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->put(object, block_id, offset, size);
    }
    ifaces_[i]->put(object, block_id, offset, size);
  }

  void get(std::string& _return, const int32_t block_id, const int32_t offset, const int32_t size) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get(_return, block_id, offset, size);
    }
    ifaces_[i]->get(_return, block_id, offset, size);
    return;
  }

  void async_put(async_response& _return, const slice_seq& seq, const std::string& object, const int32_t block_id, const int32_t offset, const int32_t size) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->async_put(_return, seq, object, block_id, offset, size);
    }
    ifaces_[i]->async_put(_return, seq, object, block_id, offset, size);
    return;
  }

  void async_get(async_response& _return, const slice_seq& seq, const int32_t block_id, const int32_t offset, const int32_t size) override {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->async_get(_return, seq, block_id, offset, size);
    }
    ifaces_[i]->async_get(_return, seq, block_id, offset, size);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
template <class Protocol_>
class storage_management_serviceConcurrentClientT : virtual public storage_management_serviceIf {
 public:
  storage_management_serviceConcurrentClientT(std::shared_ptr< Protocol_> prot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocolT(prot);
  }
  storage_management_serviceConcurrentClientT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot, std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(std::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(std::shared_ptr< Protocol_> iprot, std::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void put(const std::string& object, const int32_t block_id, const int32_t offset, const int32_t size) override;
  int32_t send_put(const std::string& object, const int32_t block_id, const int32_t offset, const int32_t size);
  void recv_put(const int32_t seqid);
  void get(std::string& _return, const int32_t block_id, const int32_t offset, const int32_t size) override;
  int32_t send_get(const int32_t block_id, const int32_t offset, const int32_t size);
  void recv_get(std::string& _return, const int32_t seqid);
  void async_put(async_response& _return, const slice_seq& seq, const std::string& object, const int32_t block_id, const int32_t offset, const int32_t size) override;
  int32_t send_async_put(const slice_seq& seq, const std::string& object, const int32_t block_id, const int32_t offset, const int32_t size);
  void recv_async_put(async_response& _return, const int32_t seqid);
  void async_get(async_response& _return, const slice_seq& seq, const int32_t block_id, const int32_t offset, const int32_t size) override;
  int32_t send_async_get(const slice_seq& seq, const int32_t block_id, const int32_t offset, const int32_t size);
  void recv_async_get(async_response& _return, const int32_t seqid);
 protected:
  std::shared_ptr< Protocol_> piprot_;
  std::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
  std::shared_ptr< ::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

typedef storage_management_serviceConcurrentClientT< ::apache::thrift::protocol::TProtocol> storage_management_serviceConcurrentClient;

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#include "storage_management_service.tcc"
#include "storage_management_service_types.tcc"

#endif
