/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_management_service_TYPES_H
#define storage_management_service_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace hive { namespace storage {

class slice_seq;

class async_response;

typedef struct _slice_seq__isset {
  _slice_seq__isset() : inode_name(false), inode_idx(false) {}
  bool inode_name :1;
  bool inode_idx :1;
} _slice_seq__isset;

class slice_seq {
 public:

  slice_seq(const slice_seq&);
  slice_seq& operator=(const slice_seq&);
  slice_seq() noexcept
            : inode_name(),
              inode_idx(0) {
  }

  virtual ~slice_seq() noexcept;
  std::string inode_name;
  int32_t inode_idx;

  _slice_seq__isset __isset;

  void __set_inode_name(const std::string& val);

  void __set_inode_idx(const int32_t val);

  bool operator == (const slice_seq & rhs) const
  {
    if (!(inode_name == rhs.inode_name))
      return false;
    if (!(inode_idx == rhs.inode_idx))
      return false;
    return true;
  }
  bool operator != (const slice_seq &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const slice_seq & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(slice_seq &a, slice_seq &b);

std::ostream& operator<<(std::ostream& out, const slice_seq& obj);

typedef struct _async_response__isset {
  _async_response__isset() : inode_name(false), inode_idx(false), content(false) {}
  bool inode_name :1;
  bool inode_idx :1;
  bool content :1;
} _async_response__isset;

class async_response {
 public:

  async_response(const async_response&);
  async_response& operator=(const async_response&);
  async_response() noexcept
                 : inode_name(),
                   inode_idx(0),
                   content() {
  }

  virtual ~async_response() noexcept;
  std::string inode_name;
  int32_t inode_idx;
  std::string content;

  _async_response__isset __isset;

  void __set_inode_name(const std::string& val);

  void __set_inode_idx(const int32_t val);

  void __set_content(const std::string& val);

  bool operator == (const async_response & rhs) const
  {
    if (!(inode_name == rhs.inode_name))
      return false;
    if (!(inode_idx == rhs.inode_idx))
      return false;
    if (!(content == rhs.content))
      return false;
    return true;
  }
  bool operator != (const async_response &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const async_response & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(async_response &a, async_response &b);

std::ostream& operator<<(std::ostream& out, const async_response& obj);

}} // namespace

#include "storage_management_service_types.tcc"

#endif
