/**
 * Autogenerated by Thrift Compiler (0.18.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "storage_management_service_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace hive { namespace storage {


slice_seq::~slice_seq() noexcept {
}


void slice_seq::__set_inode_name(const std::string& val) {
  this->inode_name = val;
}

void slice_seq::__set_inode_idx(const int32_t val) {
  this->inode_idx = val;
}
std::ostream& operator<<(std::ostream& out, const slice_seq& obj)
{
  obj.printTo(out);
  return out;
}


void swap(slice_seq &a, slice_seq &b) {
  using ::std::swap;
  swap(a.inode_name, b.inode_name);
  swap(a.inode_idx, b.inode_idx);
  swap(a.__isset, b.__isset);
}

slice_seq::slice_seq(const slice_seq& other0) {
  inode_name = other0.inode_name;
  inode_idx = other0.inode_idx;
  __isset = other0.__isset;
}
slice_seq& slice_seq::operator=(const slice_seq& other1) {
  inode_name = other1.inode_name;
  inode_idx = other1.inode_idx;
  __isset = other1.__isset;
  return *this;
}
void slice_seq::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "slice_seq(";
  out << "inode_name=" << to_string(inode_name);
  out << ", " << "inode_idx=" << to_string(inode_idx);
  out << ")";
}


async_response::~async_response() noexcept {
}


void async_response::__set_inode_name(const std::string& val) {
  this->inode_name = val;
}

void async_response::__set_inode_idx(const int32_t val) {
  this->inode_idx = val;
}

void async_response::__set_content(const std::string& val) {
  this->content = val;
}
std::ostream& operator<<(std::ostream& out, const async_response& obj)
{
  obj.printTo(out);
  return out;
}


void swap(async_response &a, async_response &b) {
  using ::std::swap;
  swap(a.inode_name, b.inode_name);
  swap(a.inode_idx, b.inode_idx);
  swap(a.content, b.content);
  swap(a.__isset, b.__isset);
}

async_response::async_response(const async_response& other2) {
  inode_name = other2.inode_name;
  inode_idx = other2.inode_idx;
  content = other2.content;
  __isset = other2.__isset;
}
async_response& async_response::operator=(const async_response& other3) {
  inode_name = other3.inode_name;
  inode_idx = other3.inode_idx;
  content = other3.content;
  __isset = other3.__isset;
  return *this;
}
void async_response::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "async_response(";
  out << "inode_name=" << to_string(inode_name);
  out << ", " << "inode_idx=" << to_string(inode_idx);
  out << ", " << "content=" << to_string(content);
  out << ")";
}

}} // namespace
